#!/usr/bin/env bash
#
# Description: Checks installed versions of programs for which there is
#              an apparmor profile for.
#
# Homepage: https://git.sr.ht/~krathalan/apparmor-profiles
#
# Copyright (C) 2019 krathalan
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide:
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# This script creates a temporary folder and may fail halfway through
trap clean_up EXIT

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Colors
readonly GREEN=$(tput setaf 10)
readonly RED=$(tput bold && tput setaf 1)
readonly NC=$(tput sgr0) # No color/turn off all tput attributes

# For faster processing
readonly SCRIPT_NAME=$(basename "$0")
readonly TMPDIR="$(mktemp -d -t "${SCRIPT_NAME}_XXXXXXXX")"
readonly OUTPUTFILEBAD="${TMPDIR}/version-check-bad.txt"
readonly OUTPUTFILEGOOD="${TMPDIR}/version-check-good.txt"
touch "${OUTPUTFILEBAD}" "${OUTPUTFILEGOOD}"

# -----------------------------------------
# ------------- User variables ------------
# -----------------------------------------

quiet="false"

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

#######################################
# Checks the version of the AppArmor profile against the installed package
# version.
# Globals:
#   Colors: GREEN, RED, NC
#   OUTPUTFILEBAD
#   OUTPUTFILEGOOD
# Arguments:
#   $1: AppArmor profile to check
# Returns:
#   none
#######################################
check_profile()
{
  local profile="$1"

  # Make sure we're only checking Krathalan's profiles
  if ! grep --quiet --directories=skip "# AppArmor profile for" "${profile}"; then
    return
  fi

  profiledVersion="$(grep Version "${profile}" 2> /dev/null | grep -v deny | awk '{print $NF}' || printf "(Problem printing info)")"

  # Remove preceding directories prefix
  profile="${profile##*/}"

  # Fix some profile names being different than their package name
  case "${profile}" in
    bluetoothd)
      profile="bluez"
      ;;
    gpg-agent)
      profile="gnupg"
      ;;
    mbsync)
      profile="isync"
      ;;
    NetworkManager)
      profile="networkmanager"
      ;;
    postfix*)
      [[ "${profile}" != "postfix-master" ]] &&
        return
      profile="postfix"
      ;;
    rngd)
      profile="rng-tools"
      ;;
    ssh|ssh-agent)
      profile="openssh"
      ;;
    systemd*)
      profile="systemd"
      ;;
    wl-copy)
      profile="wl-clipboard"
      ;;
  esac

  local installedVersion
  installedVersion="$(pacman -Qi "${profile}" 2> /dev/null | grep Version | awk '{printf $3}' || printf "not")"

  # Remove package release suffix from installed version
  installedVersion="${installedVersion%%-*}"
  installedVersion="${installedVersion%%p*}"
  installedVersion="${installedVersion%%+*}"
  installedVersion="${installedVersion%%.r*}"

  if [[ "${installedVersion}" == "not" ]]; then
    printf "%s %s installed\n" "${profile}" "${installedVersion}" >> "${OUTPUTFILEGOOD}"
  elif [[ ! "${installedVersion}" == "${profiledVersion}" ]]; then
    printf "%s%s %s installed; %s profiled%s\n" "${RED}" "${profile}" "${installedVersion}" "${profiledVersion}" "${NC}" >> "${OUTPUTFILEBAD}"
  else
    printf "%s%s profile up to date%s\n" "${GREEN}" "${profile}" "${NC}" >> "${OUTPUTFILEGOOD}"
  fi
}

#######################################
# Removes temporary folder before exit.
# Globals:
#   TMPDIR
# Arguments:
#   none
# Returns:
#   none
#######################################
clean_up()
{
    if [[ -d "${TMPDIR}" ]]; then
        rm -rf "${TMPDIR}"
    fi
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

# Print intro
if [[ "$(whoami)" = "root" ]]; then
  printf "%sThis script should NOT be run as root (or sudo)!%s\n" "${RED}" "${NC}" >&2
  exit 1
fi

if [[ $# -gt 0 ]]; then
  if [[ "$1" == "--quiet" ]] || [[ "$1" == "-q" ]]; then
    quiet="true"
  fi
fi

for profile in /etc/apparmor.d/*; do
  check_profile "${profile}" &
done

wait

if [[ "${quiet}" == "true" ]]; then
  sort "${OUTPUTFILEBAD}"
else
  sort "${OUTPUTFILEBAD}" "${OUTPUTFILEGOOD}"
fi
